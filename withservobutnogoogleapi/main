#include <SPI.h>
#include <Arduino.h>
#include <MFRC522.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <WiFiClientSecure.h>
#include <ESP32Servo.h>

#define entranceServoPin 2
#define exitServoPin 15
#define RST_PIN 4
#define SS_PIN 5
#define BUZZER 14

Servo entranceServo;
Servo exitServo;

const int greenLed = 13;
const int redLed = 12;

MFRC522 mfrc522(SS_PIN, RST_PIN);
MFRC522::MIFARE_Key key;
MFRC522::StatusCode status;

int blockNum = 2;
byte bufferLen = 18;
byte readBlockData[18];

String card_holder_name;
const String sheet_url = "https://script.google.com/macros/s/AKfycbxkFEYbnaFH_o08X6QfqrcluAw4ck_Kk3-JysBSnIvhzMP6N_olaDH4bqQyj6lAZLFT/exec?name=";

#define WIFI_SSID "nyak"
#define WIFI_PASSWORD "joyceanne"

String lastCard = "";
bool isInside = false;

void setup() {
  Serial.begin(9600);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(200);
  }
  Serial.println("WiFi Connected");

  pinMode(BUZZER, OUTPUT);
  pinMode(greenLed, OUTPUT);
  pinMode(redLed, OUTPUT);

  SPI.begin();
  mfrc522.PCD_Init();

  entranceServo.attach(entranceServoPin);
  exitServo.attach(exitServoPin);

  entranceServo.write(0);
  exitServo.write(0);
}

void loop() {
  if (!mfrc522.PICC_IsNewCardPresent()) return;
  if (!mfrc522.PICC_ReadCardSerial()) return;

  ReadDataFromBlock(blockNum, readBlockData);

  String currentCard = "";
  for (int j = 0; j < 16; j++) {
    currentCard += char(readBlockData[j]);
  }
  currentCard.trim();

  Serial.print("Scanned Card: ");
  Serial.println(currentCard);

  if (currentCard == lastCard && isInside) {
    handleExit();  // Exiting the building
  } else {
    handleEntrance(currentCard);  // Entering the building
  }

  if (WiFi.status() == WL_CONNECTED) {
    sendToGoogleSheet(currentCard);  // This part is untouched
  }

  mfrc522.PICC_HaltA();
  mfrc522.PCD_StopCrypto1();
}

void handleEntrance(String card) {
  triggerBuzzerAndLED();    // Play buzzer and LED before opening entrance
  delay(2000);               // Wait for 2 seconds after buzzer+LED

  entranceServo.write(90);   // Open entrance gate
  delay(2000);                // Gate stays open for 2 seconds
  entranceServo.write(0);    // Close entrance gate

  lastCard = card;           // Remember this card for exit check
  isInside = true;
  Serial.println("Entrance successful.");
}

void handleExit() {
  triggerBuzzerAndLED();     // Play buzzer and LED before opening exit
  delay(2000);                // Wait for 2 seconds after buzzer+LED

  exitServo.write(90);       // Open exit gate
  delay(2000);                // Gate stays open for 2 seconds
  exitServo.write(0);        // Close exit gate

  lastCard = "";              // Clear the card after exit
  isInside = false;
  Serial.println("Exit successful.");
}

void triggerBuzzerAndLED() {
  for (int i = 0; i < 4; i++) {
    digitalWrite(BUZZER, HIGH);
    digitalWrite(greenLed, HIGH);
    delay(250);
    digitalWrite(BUZZER, LOW);
    digitalWrite(greenLed, LOW);
    delay(250);
  }
}

void sendToGoogleSheet(String card) {
  WiFiClientSecure client;
  client.setInsecure();  // This is the original way you had it â€” not changed

  String fullURL = sheet_url + card;  // This is also untouched
  Serial.print("Sending to Google Sheets: ");
  Serial.println(fullURL);

  HTTPClient https;
  if (https.begin(client, fullURL)) {
    int httpCode = https.GET();
    if (httpCode > 0) {
      Serial.printf("Google Sheets Response: %d\n", httpCode);
    } else {
      Serial.printf("HTTP Error: %s\n", https.errorToString(httpCode).c_str());
    }
    https.end();
  } else {
    Serial.println("Unable to connect to Google Sheets.");
  }
}

void ReadDataFromBlock(int blockNum, byte readBlockData[]) {
  for (byte i = 0; i < 6; i++) {
    key.keyByte[i] = 0xFF;
  }

  if (mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, blockNum, &key, &(mfrc522.uid)) != MFRC522::STATUS_OK) {
    Serial.println("Authentication failed!");
    return;
  }

  if (mfrc522.MIFARE_Read(blockNum, readBlockData, &bufferLen) != MFRC522::STATUS_OK) {
    Serial.println("Failed to read block.");
  }
}
