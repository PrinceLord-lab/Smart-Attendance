#include <WiFi.h>
#include <HTTPClient.h>
#include <WiFiClientSecure.h>
#include <MFRC522.h>
#include <SPI.h>
#include <ESP32Servo.h>

// Pin configuration
#define RST_PIN            0    // Reset pin for MFRC522
#define SS_PIN             5    // Slave Select pin for MFRC522
#define BUZZER             14   // Buzzer pin
#define greenLed           12   // Green LED (for authorized events)
#define redLed             13   // Red LED (for unauthorized events)
#define entranceServoPin   25   // Pin for entrance servo
#define exitServoPin       26   // Pin for exit servo

// Duration (in milliseconds) the servo stays open for passage.
const int SERVO_OPEN_DURATION = 5000;   // 5000 ms = 5 seconds

Servo entranceServo;
Servo exitServo;

// RFID reader setup
MFRC522 mfrc522(SS_PIN, RST_PIN);
MFRC522::MIFARE_Key key;
int blockNum = 2;            // Block to read (holds 16 bytes)
byte bufferLen = 18;         // 16 bytes expected (plus extra room)
byte readBlockData[18];      // Buffer for data read from the card

// Authorized card IDs (exact, case-sensitive match)
String authorizedCards[] = { "Prince_Mendoza", "Hannah_De_Leon", "Ralph_Manawes" };
const int authorizedCount = sizeof(authorizedCards) / sizeof(authorizedCards[0]);

// Google Sheet endpoint URL (update with your actual URL)
const String sheet_url = "https://script.google.com/macros/s/AKfycbxkFEYbnaFH_o08X6QfqrcluAw4ck_Kk3-JysBSnIvhzMP6N_olaDH4bqQyj6lAZLFT/exec?name=";

// WiFi credentials
#define WIFI_SSID     "nyak"
#define WIFI_PASSWORD "joyceanne"

// Storage for cards that are "inside"
#define MAX_INSIDE_CARDS 10
String insideCards[MAX_INSIDE_CARDS];  // Array to hold card IDs currently inside
int insideCount = 0;                   // Count of currently inside cards

// Maximum number of retry attempts for HTTP update in an entrance event
const int MAX_RETRIES = 3;

void setup() {
  Serial.begin(9600);
  Serial.println();

  // Connect to WiFi
  Serial.print("Connecting to WiFi");
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(200);
  }
  Serial.println();
  Serial.println("WiFi connected.");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  // Initialize output pins for buzzer and LEDs
  pinMode(BUZZER, OUTPUT);
  pinMode(greenLed, OUTPUT);
  pinMode(redLed, OUTPUT);

  // Attach servos and set to initial (closed) position
  entranceServo.attach(entranceServoPin);
  exitServo.attach(exitServoPin);
  entranceServo.write(0);
  exitServo.write(0);

  // Initialize SPI and RFID reader
  SPI.begin();
  mfrc522.PCD_Init();
  Serial.println("RFID reader initialized. Please scan a card.");
}

void loop() {
  // Prepare the default key (six bytes of 0xFF)
  for (byte i = 0; i < 6; i++) {
    key.keyByte[i] = 0xFF;
  }

  // Wait for a new card; if none, exit loop()
  if (!mfrc522.PICC_IsNewCardPresent()) return;
  if (!mfrc522.PICC_ReadCardSerial()) return;

  Serial.println("\n** Card Detected **");

  // Read 16 bytes from the specified block
  ReadDataFromBlock(blockNum, readBlockData);

  // Copy the 16 bytes into a char array and null-terminate it
  char cardData[17];
  memcpy(cardData, readBlockData, 16);
  cardData[16] = '\0';

  Serial.print("Card data read: [");
  Serial.print(cardData);
  Serial.println("]");

  // Convert to an Arduino String for easier comparison
  String cardStr = String(cardData);

  // Check if the card is authorized (exact, case-sensitive)
  bool isAuthorized = false;
  for (int i = 0; i < authorizedCount; i++) {
    if (cardStr == authorizedCards[i]) {
      isAuthorized = true;
      break;
    }
  }

  if (isAuthorized) {
    // Determine if the card is already marked as inside
    bool cardInside = false;
    int insideIndex = -1;
    for (int i = 0; i < insideCount; i++) {
      if (insideCards[i] == cardStr) {
        cardInside = true;
        insideIndex = i;
        break;
      }
    }

    if (!cardInside) {
      // --- ENTRANCE EVENT ---
      Serial.println("Authorized card detected: Entrance event.");
      
      // Attempt HTTP update with retries for entrance event
      bool updateSuccess = false;
      int attempts = 0;
      while (attempts < MAX_RETRIES && !updateSuccess) {
        updateSuccess = sendGoogleUpdate(cardStr, "entrance");
        if (!updateSuccess) {
          attempts++;
          Serial.print("HTTP update for entrance event failed, retrying (");
          Serial.print(attempts);
          Serial.println(")...");
          delay(2000);  // Wait before retrying
        }
      }
      
      if (updateSuccess) {
        // Activate the entrance servo ONLY if the HTTP update was successful.
        simulateServo("entrance");

        // Flash green LED and sound buzzer for feedback
        for (int k = 0; k < 2; k++) {
          digitalWrite(BUZZER, HIGH);
          digitalWrite(greenLed, HIGH);
          delay(200);
          digitalWrite(BUZZER, LOW);
          digitalWrite(greenLed, LOW);
          delay(200);
        }
        
        // Add the card to the inside list if update succeeded.
        if (insideCount < MAX_INSIDE_CARDS) {
          insideCards[insideCount++] = cardStr;
          Serial.print("Card ");
          Serial.print(cardStr);
          Serial.println(" added to the inside list.");
        } else {
          Serial.println("Inside card storage is full!");
        }
      } else {
        Serial.println("HTTP update for entrance event failed after retries. Entrance event not recorded.");
      }
    } else {
      // --- EXIT EVENT ---
      Serial.println("Authorized card detected: Exit event.");
      
      // Attempt HTTP update for exit event (no retry loop)
      bool exitUpdateSuccess = sendGoogleUpdate(cardStr, "exit");
      if (exitUpdateSuccess) {
        // Activate the exit servo ONLY if the HTTP update is successful.
        simulateServo("exit");
        
        // Flash green LED and sound buzzer for feedback
        for (int k = 0; k < 2; k++) {
          digitalWrite(BUZZER, HIGH);
          digitalWrite(greenLed, HIGH);
          delay(200);
          digitalWrite(BUZZER, LOW);
          digitalWrite(greenLed, LOW);
          delay(200);
        }
        
        // Remove the card from the inside list if update is successful.
        if (insideIndex != -1) {
          for (int i = insideIndex; i < insideCount - 1; i++) {
            insideCards[i] = insideCards[i + 1];
          }
          insideCount--;
          Serial.print("Card ");
          Serial.print(cardStr);
          Serial.println(" removed from inside list (exit event).");
        }
      } else {
        Serial.println("HTTP update for exit event failed. Card remains marked as inside.");
      }
    }
  } else {
    // --- Unauthorized card ---
    Serial.println("Unauthorized card detected.");
    digitalWrite(BUZZER, HIGH);
    digitalWrite(redLed, HIGH);
    delay(1000);
    digitalWrite(BUZZER, LOW);
    digitalWrite(redLed, LOW);
  }

  // End communication with the card
  mfrc522.PICC_HaltA();
  mfrc522.PCD_StopCrypto1();
  delay(1000);  // Short delay before processing the next card
}

// Reads 16 bytes from the specified block.
void ReadDataFromBlock(int blockNum, byte readBlockData[]) {
  MFRC522::StatusCode status = mfrc522.PCD_Authenticate(
      MFRC522::PICC_CMD_MF_AUTH_KEY_A, blockNum, &key, &(mfrc522.uid));
  if (status != MFRC522::STATUS_OK) {
    Serial.print("Authentication failed for Read: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return;
  } else {
    Serial.println("Authentication successful for read.");
  }
  
  status = mfrc522.MIFARE_Read(blockNum, readBlockData, &bufferLen);
  if (status != MFRC522::STATUS_OK) {
    Serial.print("Reading failed: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return;
  } else {
    Serial.println("Block read successfully.");
  }
}

// Controls the servos for either "entrance" or "exit" events.
// For "entrance": the entrance servo opens (90°) and remains open for SERVO_OPEN_DURATION before closing.
// For "exit": the exit servo opens (90°) and remains open for SERVO_OPEN_DURATION before closing.
void simulateServo(String mode) {
  if (mode == "entrance") {
    Serial.println("Activating entrance servo.");
    entranceServo.write(90);             // Open entrance servo to 90°
    delay(SERVO_OPEN_DURATION);          // Keep open for 5 seconds
    entranceServo.write(0);              // Bring back to closed position (0°)
    Serial.println("Entrance servo returned to normal position.");
  } 
  else if (mode == "exit") {
    Serial.println("Activating exit servo.");
    // Use 90° for exit servo (adjust if needed according to your installation)
    exitServo.write(90);                 // Open exit servo to 90°
    delay(SERVO_OPEN_DURATION);          // Keep open for 5 seconds
    exitServo.write(0);                  // Bring back to closed position (0°)
    Serial.println("Exit servo returned to normal position.");
  }
}

// Sends an HTTP GET update to the Google Sheet with the card ID and event type.
// Returns true if the update is successful, false otherwise.
bool sendGoogleUpdate(String cardId, String event) {
  if (WiFi.status() == WL_CONNECTED) {
    WiFiClientSecure client;
    client.setInsecure();
    String full_url = sheet_url + cardId + "&event=" + event;
    HTTPClient https;
    Serial.print("[HTTPS] Sending ");
    Serial.print(event);
    Serial.println(" update...");
    if (https.begin(client, full_url)) {
      int httpCode = https.GET();
      if (httpCode > 0) {
        Serial.printf("[HTTPS] %s update successful, code: %d\n", event.c_str(), httpCode);
        https.end();
        return true;
      } else {
        Serial.printf("[HTTPS] %s update failed, error: %s\n", event.c_str(), https.errorToString(httpCode).c_str());
      }
      https.end();
    } else {
      Serial.println("[HTTPS] Unable to connect for update");
    }
  } else {
    Serial.println("[HTTPS] WiFi not connected, update aborted.");
  }
  return false;
}
